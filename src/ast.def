autogen definitions ast; /* -*- mode:c -*- */

/* This is the definition file for the AST.

Copyright (C) 2014 Kieran Colford

This file is part of Compiler.

Compiler is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

Compiler is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with Compiler; see the file COPYING.  If not see
<http://www.gnu.org/licenses/>.*/

added_code = "
#include <stdbool.h>
#include <stddef.h>

#define AST_THROW_AWAY 1
#define AST_RETURN     2
";

top_level = {
    type = "char *";
    call = loc;
};

types = {
    name = block;
    cont = { 
	type = "struct ast *";
	call = val; 
    };
};

types = { 
    name = function;
    cont = { 
	type = "char *";
	call = type; 
    };
    cont = {
	type = "char *";
	call = name;
    };
    cont = {
	type = "struct ast *";
	call = args;
    };
};

types = {
    name = cond;
    cont = {
	type = "struct ast *";
	call = cond;
    };
};

types = {
    name = label;
    cont = {
	type = "char *";
	call = name;
    };
};

types = {
    name = jump;
    cont = {
	type = "char *";
	call = name;
    };
};

types = {
    name = integer;
    cont = {
	type = "long long";
	call = i;
    };
};

types = {
    name = string;
    cont = {
	type = "char *";
	call = val;
    };
};

types = {
    name = variable;
    cont = {
	type = "char *";
	call = type;
    };
    cont = {
	type = "char *";
	call = name;
    };
    extra = {
	type = int;
	call = alloc;
    };
};

types = {
    name = binary;
    cont = {
	type = int;
	call = op;
    };
    cont = {
	type = "struct ast *";
	call = left;
    };
};

types = {
    name = unary;
    cont = {
	type = int;
	call = op;
    };
};

types = {
    name = function_call;
    cont = {
	type = "struct ast *";
	call = name;
    };
};

types = {
    name = crement;
    cont = {
	type = int;
	call = isprefix;
    };
    cont = {
	type = int;
	call = isincrease;
    };
};
